{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/acom/exo_com/test/src/Composants/PdfDocument.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\nimport { Page, Document, StyleSheet, PDFViewer, Text, View } from '@react-pdf/renderer'; \n\n\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'column',\n    backgroundColor: '#E4E4E4',\n    padding: 10,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20,\n  },\n  content: {\n    fontSize: 12,\n  },\n});\n\n\n\n\n\nconst PdfDocument = () => {\n    \n    \n  // Utilise useState pour stocker les items du localStorage\n  const [savedItems, setSavedItems] = useState([]);\n    \n  // Utilise useEffect pour récupérer les items depuis le localStorage au chargement du composant\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"cartItems\");\n    if (savedData) {\n      setSavedItems(JSON.parse(savedData));\n    }\n  }, []);\n  \n\n    \n  return (\n    <Document>\n      <Page style={styles.page}>\n        <View>\n          <Text style={styles.title}>Ma Commande</Text>\n          <Text style={styles.content}>\n            {nom}\n          </Text>\n          <Text style={styles.content}>\n            {savedItems.map((item) => {\n              return (\n                <View key={item.id}>\n                  <Text style={styles.content}>\n                    Nom de l'item : {item.name}\n                  </Text>\n                  <Text style={styles.content}>\n                    Prix de l'item : {item.price}\n                  </Text>\n                </View>\n              );\n            })}\n\n          </Text>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nexport default PdfDocument;*/\n\nimport React, { useState, useEffect } from \"react\";\nimport { Page, Document, StyleSheet, PDFViewer, Text, View } from '@react-pdf/renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'column',\n    backgroundColor: '#E4E4E4',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20\n  },\n  itemContainer: {\n    marginBottom: 10\n  },\n  itemName: {\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n  itemPrice: {\n    fontSize: 12\n  },\n  totalPrice: {\n    fontSize: 16,\n    marginTop: 30\n  }\n});\nconst PdfDocument = () => {\n  _s();\n  // Utilize useState to store the items from localStorage\n  const [savedItems, setSavedItems] = useState([]);\n\n  // Utilize useEffect to retrieve items from localStorage on component load\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"cartItems\");\n    if (savedData) {\n      setSavedItems(JSON.parse(savedData));\n    }\n  }, []);\n\n  // Calculate the total price of all items\n  const totalAmount = savedItems.reduce((total, item) => total + item.price, 0);\n  return /*#__PURE__*/_jsxDEV(Document, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      style: styles.page,\n      children: /*#__PURE__*/_jsxDEV(View, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          style: styles.title,\n          children: \"Receipt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), savedItems.map(item => /*#__PURE__*/_jsxDEV(View, {\n          style: styles.itemContainer,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            style: styles.itemName,\n            children: [\"Item Name: \", item.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.itemPrice,\n            children: [\"Price: \", item.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Text, {\n          style: styles.totalPrice,\n          children: [\"Total Price: \", totalAmount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfDocument, \"Lh4UsnoQXxRMwp8IGQt+NBKW08o=\");\n_c = PdfDocument;\nexport default PdfDocument;\nvar _c;\n$RefreshReg$(_c, \"PdfDocument\");","map":{"version":3,"names":["React","useState","useEffect","Page","Document","StyleSheet","PDFViewer","Text","View","jsxDEV","_jsxDEV","styles","create","page","flexDirection","backgroundColor","padding","title","fontSize","marginBottom","itemContainer","itemName","fontWeight","itemPrice","totalPrice","marginTop","PdfDocument","_s","savedItems","setSavedItems","savedData","localStorage","getItem","JSON","parse","totalAmount","reduce","total","item","price","children","style","fileName","_jsxFileName","lineNumber","columnNumber","map","name","id","_c","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/acom/exo_com/test/src/Composants/PdfDocument.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\nimport { Page, Document, StyleSheet, PDFViewer, Text, View } from '@react-pdf/renderer'; \n\n\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'column',\n    backgroundColor: '#E4E4E4',\n    padding: 10,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20,\n  },\n  content: {\n    fontSize: 12,\n  },\n});\n\n\n\n\n\nconst PdfDocument = () => {\n    \n    \n  // Utilise useState pour stocker les items du localStorage\n  const [savedItems, setSavedItems] = useState([]);\n    \n  // Utilise useEffect pour récupérer les items depuis le localStorage au chargement du composant\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"cartItems\");\n    if (savedData) {\n      setSavedItems(JSON.parse(savedData));\n    }\n  }, []);\n  \n\n    \n  return (\n    <Document>\n      <Page style={styles.page}>\n        <View>\n          <Text style={styles.title}>Ma Commande</Text>\n          <Text style={styles.content}>\n            {nom}\n          </Text>\n          <Text style={styles.content}>\n            {savedItems.map((item) => {\n              return (\n                <View key={item.id}>\n                  <Text style={styles.content}>\n                    Nom de l'item : {item.name}\n                  </Text>\n                  <Text style={styles.content}>\n                    Prix de l'item : {item.price}\n                  </Text>\n                </View>\n              );\n            })}\n\n          </Text>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nexport default PdfDocument;*/\n\nimport React, { useState, useEffect } from \"react\";\nimport { Page, Document, StyleSheet, PDFViewer, Text, View } from '@react-pdf/renderer'; \n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'column',\n    backgroundColor: '#E4E4E4',\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20,\n  },\n  itemContainer: {\n    marginBottom: 10,\n  },\n  itemName: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  itemPrice: {\n    fontSize: 12,\n  },\n  totalPrice: {\n    fontSize: 16,\n    marginTop: 30,\n  },\n});\n\nconst PdfDocument = () => {\n  // Utilize useState to store the items from localStorage\n  const [savedItems, setSavedItems] = useState([]);\n\n  // Utilize useEffect to retrieve items from localStorage on component load\n  useEffect(() => {\n    const savedData = localStorage.getItem(\"cartItems\");\n    if (savedData) {\n      setSavedItems(JSON.parse(savedData));\n    }\n  }, []);\n  \n  // Calculate the total price of all items\n  const totalAmount = savedItems.reduce((total, item) => total + item.price, 0);\n\n  return (\n    <Document>\n      <Page style={styles.page}>\n        <View>\n          <Text style={styles.title}>Receipt</Text>\n          {savedItems.map((item) => (\n            <View key={item.id} style={styles.itemContainer}>\n              <Text style={styles.itemName}>\n                Item Name: {item.name}\n              </Text>\n              <Text style={styles.itemPrice}>\n                Price: {item.price}\n              </Text>\n            </View>\n          ))}\n          <Text style={styles.totalPrice}>\n            Total Price: {totalAmount}\n          </Text>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nexport default PdfDocument;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}